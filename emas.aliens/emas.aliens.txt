import java.util.Scanner;

public class Principal {
    public static void main(String[] args) throws Exception {
        int linhaAntiga, colunaAntiga, linhaNova, colunaNova;
        boolean dentroDaMatriz, desocupado, localAlien, localEma, posicaoFinalAlien, posicaoFinalEma;
        Scanner entrada = new Scanner(System.in);
        System.out.println("Bem Vindo ao Jogo Emas Vs Aliens");
        //mostra o estado inicial do jogo
        EstadoDoJogo.organizarMatriz();
        do{
            do{
                System.out.println("Jogador 1, informe a posição do Alien que deseja mover");
                linhaAntiga = entrada.nextInt();
                colunaAntiga = entrada.nextInt();
                //recebe se há Alien na posição, se não exibe mensagem negativa
                localAlien = EstadoDoJogo.posicaoAlien(linhaAntiga, colunaAntiga);
                if(localAlien == false){
                    System.out.println("Não existe um Alien na posição informada");
                }
                //enquanto não há alien na posição, repete
            } while(localAlien == false);
            do{
                System.out.println("Jogador 1, informe a posição desejada para o Alien:");
                linhaNova = entrada.nextInt();
                colunaNova = entrada.nextInt();
                //recebe se a posição desejada para o Alien está dentro da matriz
                dentroDaMatriz = EstadoDoJogo.isDentroDaMatriz(linhaNova, colunaNova);
                //recebe se a posição desejada para o Alien está desocupada
                desocupado = EstadoDoJogo.isDesocupada(linhaNova, colunaNova);
                posicaoFinalAlien = false;
                //se alguma das informações anteriores for falsa exibe mensagem negativa
                if(!dentroDaMatriz || !desocupado){
                    System.out.println("Jogada inválida");
                } else {
                    //recebe se o Alien está se movendo na diagonal
                    posicaoFinalAlien = EstadoDoJogo.moveAlien(linhaAntiga, colunaAntiga, linhaNova, colunaNova);
                    //se sim exibe mensagem negativa
                    if(posicaoFinalAlien==false){
                        System.out.println("Posição Invalida");
                    //se não, move o Alien para a posição desejada
                    } else{
                        EstadoDoJogo.moveAlien(linhaAntiga, colunaAntiga, linhaNova, colunaNova);
                    }
                    //mostra o estado do jogo atualizado
                    EstadoDoJogo.mostrar();
                }
                //enquanto alguma das posições forem inválidas a rodada segue do jogador 1
            } while(!dentroDaMatriz || !desocupado || !posicaoFinalAlien);

            do{
                System.out.println("Jogador 2, informe a posição da Ema que deseja mover");
                linhaAntiga = entrada.nextInt();
                colunaAntiga = entrada.nextInt();
                //recebe se há Ema na posição, se não exibe mensagem negativa
                localEma = EstadoDoJogo.posicaoEma(linhaAntiga, colunaAntiga);
                if(localEma == false){
                    System.out.println("Não existe uma Ema na posição informada");
                }
                //enquanto não há Ema na posição, repete
            } while(localEma == false);
            do{
                System.out.println("Jogador 2, informe a posição desejada para a Ema:");
                linhaNova = entrada.nextInt();
                colunaNova = entrada.nextInt();
                //recebe se a posição desejada para Ema está dentro da matriz
                dentroDaMatriz = EstadoDoJogo.isDentroDaMatriz(linhaNova, colunaNova);
                //recebe se a posição desejada  para Ema está desocupada
                desocupado = EstadoDoJogo.isDesocupada(linhaNova, colunaNova);
                posicaoFinalEma = false;
                //se alguma das informações anteriores for falsa exibe mensagem negativa
                if(!dentroDaMatriz || !desocupado){
                    System.out.println("Jogada inválida");
                } else {
                    //recebe se a Ema está se movendo na diagonal
                    posicaoFinalEma = EstadoDoJogo.moveEma(linhaAntiga, colunaAntiga, linhaNova, colunaNova);
                    //se sim exibe mensagem negativa
                    if(posicaoFinalEma == false){
                        System.out.println("Posição Inválida");
                    //se não, move a Ema para a posição desejada
                    } else {
                    EstadoDoJogo.moveEma(linhaAntiga, colunaAntiga, linhaNova, colunaNova);
                    }
                    //mostra o estado do jogo atualizado
                    EstadoDoJogo.mostrar();
                }
                //enquanto alguma das posições forem inválidas a rodada segue do jogador 2
            } while(!dentroDaMatriz || !desocupado || !posicaoFinalEma);
            //condição de fim de jogo
        } while(EstadoDoJogo.fimDeJogo()==true);
        entrada.close();
    }
}









public class EstadoDoJogo {
    static char matriz[][] = new char[5][4];
    //inicia o estado do jogo
    static void organizarMatriz(){
        for(int i = 0; i<5; i++){
            for(int j = 0; j<4;j++){
                if(i == 0 || i == 1){
                    matriz[i][j] = 'E';
                } else if(i == 4 && (j == 1 || j ==2)){
                    matriz[i][j] = 'A';
                } else {
                    matriz[i][j] = '.';
                }
                System.out.print(" "+matriz[i][j]);
            }
            System.out.println(" ");
        }  
    }
    //atualiza o estado do jogo
    static void mostrar(){
        for(int i = 0; i<5; i++){
            for(int j = 0; j<4;j++){
                System.out.print(" "+matriz[i][j]);
            }
            System.out.println(" ");
        }  
    }
    //testa se na posição recebida há um Alien
    static boolean posicaoAlien(int linha, int coluna){
        if(matriz[linha][coluna]=='A'){
            return true;
        }
        return false;
    }
    //testa se a posição desejada esta dentro da matriz
    static boolean isDentroDaMatriz(int l, int c){
        if(l>=0 && c>=0 && l<5 && c<4){
            return true;
        }
        return false;
    }
    //testa se a posição desejada esta desocupada
    static boolean isDesocupada(int l, int c){
        if(matriz[l][c]=='.'){
            return true;
        }
        return false;
    }
    //testa se o alien não vai se mover na diagonal
    static boolean moveAlien(int linhaAntiga, int colunaAntiga, int linhaNova, int colunaNova){
        if(((linhaAntiga-linhaNova)==1 || (linhaAntiga-linhaNova)==-1) && colunaAntiga == colunaNova){
            matriz[linhaAntiga][colunaAntiga] = '.';
            matriz[linhaNova][colunaNova] = 'A';
            return true;
        } else if(((colunaAntiga-colunaNova)==1 || (colunaAntiga-colunaNova)==-1) && linhaAntiga==linhaNova){
            matriz[linhaAntiga][colunaAntiga] = '.';
            matriz[linhaNova][colunaNova] = 'A';
            return true;
        }
        return false;
    }
    //testa se na posição recebida há uma Ema
    static boolean posicaoEma(int linha, int coluna){
        if(matriz[linha][coluna]=='E'){
            return true;
        }
        return false;
    }
    //testa se a Ema não vai se mover na diagonal
     static boolean moveEma(int linhaAntiga, int colunaAntiga, int linhaNova, int colunaNova){
        if(((linhaAntiga-linhaNova)==1 || (linhaAntiga-linhaNova)==-1) && colunaAntiga == colunaNova){
            matriz[linhaAntiga][colunaAntiga] = '.';
            matriz[linhaNova][colunaNova] = 'E';
            return true;
        } else if(((colunaAntiga-colunaNova)==1 || (colunaAntiga-colunaNova)==-1) && linhaAntiga==linhaNova){
            matriz[linhaAntiga][colunaAntiga] = '.';
            matriz[linhaNova][colunaNova] = 'E';
            return true;
        }
        return false;
    }
//condição de fim de jogo
    static boolean fimDeJogo(){
        return true;
    }

}